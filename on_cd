#!/bin/sh

# Shell colors
txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
txtrst='\e[0m'    # Text Reset

# Make echo useful
alias echo="echo -e"

# Variables: Read RC file or use defaults
if [[ -f ~/.on_cdrc ]]
then
    source "$HOME/.on_cdrc"
fi
[[ -z $cds ]] && cds="./.on_cd"
[[ -z $cdl ]] && cdl="./.on_cd_lock"
[[ -z $cdm ]] && cdm="$txtred""Press ENTER to run script.\n""$txtrst"
[[ -z $cdq ]] && cdq="$txtred""Quit""$txtrst"

do_print() {
    echo -e "$1""$2""$txtrst"
}

do_help() {
    if [[ $1 == "-h" || $1 == "--help" ]]
    then
        do_print "$txtgrn" "See on_cd manual"
        do_print "$txtblu" "on_cd -m"
    elif [[ $1 == "-m" ]]
    then
        do_print "$txtblu" "$(curl https://raw.githubusercontent.com/TimurKiyivinski/on_cd/master/README.md 2> /dev/null)"
    else
        do_print "$txtred" "Please see: on_cd --help"
    fi
}

do_run() {
    do_print "$txtpur" "Executing script: $1"
    # Show on_cd message
    echo $cdm
    # Get input 
    read -s -n 1 input
    # Run script if user presses ENTER
    if [[ $input == "" ]]
    then
        # Create lock
        cp $cds $cdl
        # Run script
        source $cds
        # Check script for background tasks
        for ((i = 0; i < ${#executables[@]}; i++))
        do
            do_print "$txtred" "Creating background task: ${executables[$i]}"
            ${executables[$i]} &
        done
    else
        do_print "$txtred" "Cancel executing: $1"
    fi

    do_print "$txtcyn" "\nDone."
}

do_term() { 
    do_print "$txtred" "Killing background processes." 
    kill $(jobs -p)
}

# Main program
if [[ -f $cds && "$@" == "" ]];
then
    if [[ -f $cdl ]];
    then
        do_print "$txtylw" "Lock detected: $cdl"
        exit
    else
        do_run $cds
    fi
else
    for option in "$@"
    do
        do_help $option
        exit
    done
fi

# Wait for background processes to terminate.
trap do_term INT 
trap do_term SIGTERM
wait

# Remove lock
if [[ -f $cdl ]]
then
    do_print "$txtylw" "Removing lock."
    rm $cdl
fi
